@page "/"
@inject OpvService opvService
@using BlazorBootstrap
@using OPVs.Servicios
@using models

<PageTitle>Buscar OPVs</PageTitle>

<h3>Buscar OPVs</h3>

<div class="container mt-4">
    <EditForm Model="@searchModel" OnValidSubmit="@SearchOPVs">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label for="startDate" class="form-label">Fecha de Inicio</label>
            <InputDate id="startDate" class="form-control" @bind-Value="searchModel.StartDate" />
        </div>

        <div class="mb-3">
            <label for="endDate" class="form-label">Fecha Final</label>
            <InputDate id="endDate" class="form-control" @bind-Value="searchModel.EndDate" />
        </div>

        <button type="submit" class="btn btn-primary">Buscar</button>
    </EditForm>

    @if (opvs != null)
    {
        <div style="margin-top: 20px">
            <Grid @ref="grid" 
            TItem="Opv"
              Class="table table-hover table-bordered table-striped"
              AllowPaging="true"
              PageSize="10"
              Data="opvs"
              Responsive="true">

            <GridColumns>
                <GridColumn TItem="Opv" HeaderText="Fecha" PropertyName="Fecha" FilterTextboxWidth="80">
                    @context.fecha.ToString("dd/MM/yyyy")
                </GridColumn>
                <GridColumn TItem="Opv" HeaderText="Empresa" PropertyName="Empresa" FilterTextboxWidth="80">
                    @context.empresa
                </GridColumn>
                    <GridColumn TItem="Opv" HeaderText="Ticket" PropertyName="Ticket" FilterTextboxWidth="80">
                        @context.ticket
                    </GridColumn>
                    <GridColumn TItem="Opv" HeaderText="Enlace" PropertyName="Enlace" FilterTextboxWidth="80">
                        @context.enlace
                    </GridColumn>
                <GridColumn TItem="Opv" HeaderText="Mercado" PropertyName="Mercado" FilterTextboxWidth="80">
                    @context.mercado
                </GridColumn>
                <GridColumn TItem="Opv" HeaderText="Valor" PropertyName="Valor">
                    @context.valor
                </GridColumn>
                <GridColumn TItem="Opv" HeaderText="Precio de Salida" TextNoWrap="true" PropertyName="PrecioSalida">
                    @context.precioSalida
                </GridColumn>
                <GridColumn TItem="Opv" HeaderText="Precio Último Cierre" TextNoWrap="true" PropertyName="PrecioUltimoCierre">
                    @context.precioUltimoCierre
                </GridColumn>
            </GridColumns>
        </Grid>

        <Button Color="ButtonColor.Success" @onclick="analizarOPVs"> Analizar datos </Button>
    </div>
    }
</div>

<Preload />

<Toasts class="p-3" AutoHide="true" Delay="3000" Placement="ToastsPlacement.TopRight" />

@code {
    [Inject] protected PreloadService PreloadService { get; set; } = default!;
    [Inject] protected ToastService ToastService { get; set; } = default!;

    BlazorBootstrap.Grid<Opv> grid = default!;


    private SearchModel searchModel = new SearchModel();
    private List<Opv> opvs;

    private async Task SearchOPVs()
    {
        try
        {
            PreloadService.Show(SpinnerColor.Light, "Cargando OPVs...");
            opvs = await opvService.GetOpvsAsync(searchModel.StartDate, searchModel.EndDate);

        }catch(Exception ex)
        {
            ToastService.Notify(new(ToastType.Danger, ex.Message));
        }
        finally
        {
            PreloadService.Hide();
            ToastService.Notify(new(ToastType.Success, $"{opvs.Count} OPVs cargados con exito"));
            
        }
        
    }

    private async Task analizarOPVs()
    {
        PreloadService.Show(SpinnerColor.Light, "Analizando los datos...");
        await Task.Delay(3000); // call the service/api
        PreloadService.Hide();
    }


}